import streamlit as st
from langchain_groq import ChatGroq
from langchain_community.utilities import ArxivAPIWrapper,WikipediaAPIWrapper
from langchain_community.tools import ArxivQueryRun,WikipediaQueryRun,DuckDuckGoSearchRun
from langchain.agents import initialize_agent,AgentType
from langchain.callbacks import StreamlitCallbackHandler
import os
from dotenv import load_dotenv

## Arxiv and wikipedia Tools
arxiv_wrapper=ArxivAPIWrapper(top_k_results=1, doc_content_chars_max=200)
arxiv=ArxivQueryRun(api_wrapper=arxiv_wrapper)

api_wrapper=WikipediaAPIWrapper(top_k_results=1,doc_content_chars_max=200)
wiki=WikipediaQueryRun(api_wrapper=api_wrapper)

search=DuckDuckGoSearchRun(name="Search") # adding capability to search the web

st.title("ðŸ”Ž Searchy - Chat with search")

## Sidebar for settings
st.sidebar.title("Settings")
api_key=st.sidebar.text_input("Enter your Groq API Key:",type="password")

if "messages" not in st.session_state: # for storing messages in session state i.e. chat history
    st.session_state["messages"]=[ # initial message to start the chat , this will be the first message in the chat history
        {"role":"assisstant","content":"Hi,I'm a chatbot who can search the web. How can I help you?"}
    ]
    
for msg in st.session_state.messages: # for every message in the chat history, display it in the chat window
    st.chat_message(msg["role"]).write(msg['content']) # this will display the message in the chat window with the role of the message (user or assistant)
    # message is a dictionary with keys "role" and "content" , roles can be "user" or "assistant" and content is the message text
    
if prompt:=st.chat_input(placeholder="What is machine learning?"): # this will display a chat input box for the user to enter their message
    # the prompt variable will store the message entered by the user in the chat input box
    # if the user enters a message, it will be stored in the prompt variable and the following code will be executed
    st.session_state.messages.append({"role":"user","content":prompt}) # append the user message to the chat history with role "user" and content as the message text
    st.chat_message("user").write(prompt) # this will display the user message in the chat window with role "user"
    
    llm=ChatGroq(groq_api_key=api_key,model_name="Llama3-8b-8192",streaming=True)
    tools=[search,arxiv,wiki]

    search_agent=initialize_agent(tools,llm,agent=AgentType.ZERO_SHOT_REACT_DESCRIPTION,handling_parsing_errors=True)
    # agent=AgentType.ZERO_SHOT_REACT_DESCRIPTION is used to create an agent that can gives response without using any previous context or memory just based on the 
    # description of the task and perform the task using the tools provided 
    # handling_parsing_errors=True is used to handle any parsing errors that may occur while processing the input


    with st.chat_message("assistant"): # this will display the assistant message in the chat window with role "assistant"
        st_cb=StreamlitCallbackHandler(st.container(),expand_new_thoughts=False) 
        # StreamlitCallbackHandler is used to display the thoughts and actions of an agent in an interactive Streamlit app.
        # whatever output is generated by the agent streamlit callback handler will be displayed in the chat window in an interactive way
        # st.container() is used to create a container for the chat message and expand_new_thoughts=False is used to not expand the new thoughts in the chat window
        response=search_agent.run(st.session_state.messages,callbacks=[st_cb]) # this will run the agent with the chat history and the callback handler
        st.session_state.messages.append({'role':'assistant',"content":response}) # append the assistant message to the chat history with role "assistant" and content as the message text
        st.write(response) # this will display the assistant message in the chat window with role "assistant" and content as the message text